// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  expires_at        Int?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  deletedAt     DateTime?

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  userCompanies UserCompany[]
}

model Company {
  id        String    @id @default(cuid())
  name      String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  orders        Order[]
  clients       Client[]
  userCompanies UserCompany[]
  products      Product[]
}

model UserCompany {
  id        Int      @id @default(autoincrement())
  userId    String
  companyId String
  role      UserRole @default(COMPANY_WORKER)
  isEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

enum UserRole {
  ADMIN
  COMPANY_OWNER
  COMPANY_ADMIN
  COMPANY_WORKER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id        String    @id @default(cuid())
  name      String
  phone     String?
  email     String?
  city      String?
  address   String?
  companyId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  orders  Order[]
  company Company @relation(fields: [companyId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(PENDING)
  toDeliverAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deliveredAt DateTime?
  deletedAt   DateTime?
  clientId    String
  userId      String
  companyId   String

  client   Client         @relation(fields: [clientId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
  company  Company        @relation(fields: [companyId], references: [id])
  products OrderProduct[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  stock       Int
  slug        String
  price       Int
  companyId   String
  deletedAt   DateTime?

  orders  OrderProduct[]
  company Company        @relation(fields: [companyId], references: [id])

  @@unique([companyId, slug])
}

model OrderProduct {
  orderId   Int
  productId Int
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}
